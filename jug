#!/usr/bin/env php
<?php

declare(strict_types=1);

require __DIR__ . '/../../autoload.php';

use Jug\Command\BuildSiteCommand;
use Jug\Config\Config;
use Symfony\Bridge\Twig\Extension\TranslationExtension;
use Symfony\Component\Console\Application;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Translation\Loader\YamlFileLoader;
use Symfony\Component\Translation\Translator;
use Twig\Environment;
use Twig\Loader\FilesystemLoader;

$application = new Application();
$filesystem = new Filesystem();

if (!$filesystem->exists('source') ||
    !$filesystem->exists('source/_includes') ||
    !$filesystem->exists('source/_layouts')) {
    throw new RuntimeException('Invalid project structure.');
}

// Config
if (!is_file('config/jug.php')) {
    throw new RuntimeException('Missing mandatory config file: config/jug.php');
}

$config = require 'config/jug.php';
$config = new Config($config);

// Twig
$loader = new FilesystemLoader(['source', 'source/_includes', 'source/_layouts']);
$twig = new Environment($loader);
foreach ($config->getAll() as $key => $value) {
    $twig->addGlobal($key, $value);
}

// Translations
if (!$config->has('default_locale')) {
    throw new RuntimeException('Missing config option: default_locale.');
}

$translator = new Translator($config->get('default_locale'));

if ($config->has('locales')) {
    foreach ($config->get('locales') as $locale) {
        $translator->addLoader('yaml', new YamlFileLoader());
        $translator->addResource('yaml', 'translations/messages.' . $locale . '.yaml', $locale);
    }
}

$twig->addExtension(new TranslationExtension($translator));

// Register our command
$application->add(new BuildSiteCommand($twig, $filesystem, $config));

$application->run();